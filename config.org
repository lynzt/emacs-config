* evil mode
** evil
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1))
#+END_SRC
** evil-key-bindings
#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))
#+END_SRC
** evil visualstar
#+BEGIN_SRC emacs-lisp
  (use-package evil-visualstar
    :ensure t
    :init
    (global-evil-visualstar-mode 1))
#+END_SRC
** evil-nerd-commenter
#+BEGIN_SRC emacs-lisp
  (use-package evil-nerd-commenter
    :ensure t
    :bind
    ("M-;" . evilnc-comment-or-uncomment-lines))
#+END_SRC
** evil modes cursor styles (monokai colors
*** https://emacs.stackexchange.com/questions/7403/evil-cursor-change-by-state
#+BEGIN_SRC emacs-lisp
  (setq evil-insert-state-cursor '((bar . 3) "#a6e22e")
        evil-normal-state-cursor '(box "#fd971f")
        evil-visual-state-cursor '(box "#f92672")
        evil-replace-state-cursor '(hollow "#a6e22e")
        evil-operator-state-cursor '((hbar . 4) "#66d9ef")
  )
#+END_SRC
* auto backups (dir)
#+BEGIN_SRC emacs-lisp
  (setq backup-by-copying t
	backup-directory-alist '(("." . "~/.backups/emacs/"))
	delete-old-versions t
	kept-new-versions 6
	kept-old-versions 2
	version-control t
	create-lockfiles nil)
#+END_SRC
* frames
** frame size
#+BEGIN_SRC emacs-lisp
  (when window-system (set-frame-size (selected-frame) 120 60))
#+END_SRC
* minor settings
** subword
##+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
##+END_SRC
** show lines and column numbers
#+BEGIN_SRC emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
;  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
  (setq-default display-line-numbers 'visual)
#+END_SRC
** mark multiple
#+BEGIN_SRC emacs-lisp
  (use-package mark-multiple
    :ensure t
    :bind ("C-c q" . 'mark-next-like-this))
#+END_SRC
** expand region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-q" . er/expand-region))
#+END_SRC
* duplicate line or region
#+BEGIN_SRC emacs-lisp
  (defun duplicate-current-line-or-region (arg)
    "Duplicates the current line or region ARG times.
  If there's no region, the current line will be duplicated. However, if
  there's a region, all lines that region covers will be duplicated."
    (interactive "p")
    (let (beg end (origin (point)))
      (if (and mark-active (> (point) (mark)))
	  (exchange-point-and-mark))
      (setq beg (line-beginning-position))
      (if mark-active
	  (exchange-point-and-mark))
      (setq end (line-end-position))
      (let ((region (buffer-substring-no-properties beg end)))
	(dotimes (i arg)
	  (goto-char end)
	  (newline)
	  (insert region)
	  (setq end (point)))
	(goto-char (+ origin (* (length region) arg) arg)))))
  (global-set-key (kbd "C-c d") 'duplicate-current-line-or-region)
#+END_SRC
* Org
** org bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC

** basic config
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
** indent
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hood 'org-indent-mode)
#+END_SRC
* exwm
#+BEGIN_SRC emacs-lisp
  (use-package exwm
    :ensure t
    :config
    (require 'exwm-config)
    (exwm-config-default))
#+END_SRC

* Which Key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
(which-key-mode))
#+END_SRC

* beacon
** flash line when changing buffers
#+BEGIN_SRC emacs-lisp
    (use-package beacon
      :ensure t
      :bind* (("C-c b" . beacon-blink))
      :init
      (beacon-mode 1)
      (setq beacon-color "#1d829e"))
#+END_SRC

* window system
** highlight line
#+BEGIN_SRC emacs-lisp
  (when window-system (global-hl-line-mode t))
#+END_SRC
** change words to symbols
###+BEGIN_SRC emacs-lisp
  (use-package pretty-mode
    :ensure t
    :config
    (global-pretty-mode t))
##+END_SRC
#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode 1)
  (add-hook
   'js-mode-hook
   (lambda ()
     (mapc (lambda (pair) (push pair prettify-symbols-alist))
	  '(("function" . #x192)
	     ))))
#+END_SRC
* cursor (bar)
#+BEGIN_SRC emacs-lisp
  (setq-default cursor-type 'bar)
#+END_SRC
* cursor color
##+BEGIN_SRC emacs-lisp
  (set-cursor-color "#ed9421")
#+END_SRC
* emacs gui
** no toolbar
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
#+END_SRC
** no scrollbar
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
#+END_SRC
# emacs settings
#+BEGIN_SRC emacs-lisp
  (setq package-enable-at-startup nil)
  (setq ring-bell-function 'ignore)
  (setq inhibit-startup-screen t)
  (setq make-backup-file nil)
  (setq auto-save-default nil)
#+END_SRC

* modeline
** spaceline
##+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq powerline-default-separator (quote arrow))
    (spaceline-spacemacs-theme))
#+END_SRC
** dimish - hide some minor modes
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :init
    (diminish 'beacon-mode)
    (diminish 'rainbow-mode)
    (diminish 'which-key-mode)
    (diminish 'global-whitespace-mode)
    (diminish 'zoom-mode)
    (diminish 'yas-minor-mode)
    ;; (diminish 'subword-mode)
  )
#+END_SRC
* IDO
** enable ido mode
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywehre t)
  (ido-mode 1)
#+END_SRC
** ido-vertical
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC
** smex
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+END_SRC


** switch buffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+END_SRC
* dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 10)))
    (setq dashboard-banner-logo-title "Don't wait. The time will never be just right"))
  
#+END_SRC
* buffers
** enable ibuffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
#+END_SRC
* helm
** use helm
##+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :init
    (helm-mode 1))
  (global-set-key (kbd "C-x b") 'helm-buffers-list)
#+END_SRC
* avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC
* config edit / reload
** edit
#+BEGIN_SRC emacs-lisp
  (defun config-visit()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key
  (kbd "C-c e") 'config-visit)
#+END_SRC
** reload
#+BEGIN_SRC emacs-lisp
  (defun config-reload()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
* rainbow
** Show Hex colors
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init (add-hook 'prog-mode-hook 'rainbow-mode))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (rainbow-delimiters-mode 1))
#+END_SRC
* switch-window
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
    '("a" "s" "d" "f" "w" "e" "r"))
    :bind
    ([remap other-window] . switch-window))
#+END_SRC
* window splitting fcn
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
* random fcnsp
* auto completion (company mode)
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC
* kill ring
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+END_SRC
* swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind ("C-s" . swiper))
#+END_SRC


* yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (use-package yasnippet-snippets
      :ensure t)
    (yas-reload-all))
  (add-hook 'prog-mode-hook #'yas-minor-mode)

#+END_SRC
* git
** magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind ("C-x g" . magit-status))
#+END_SRC
** git gutter
##+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :ensure t
    :init
    (global-git-gutter-mode 1)
    (progn
      (setq git-gutter:separator-sign " "
	    git-gutter:lighter " GG"))
    :config
    (progn
      (set-face-background 'git-gutter:deleted "#990A1B")
      (set-face-foreground 'git-gutter:deleted "#990A1B")
      (set-face-background 'git-gutter:modified "#00736F")
      (set-face-foreground 'git-gutter:modified "#00736F")
      (set-face-background 'git-gutter:added "#546E00")
      (set-face-foreground 'git-gutter:added "#546E00"))
    :bind (("C-x p" . git-gutter:previous-hunk)
	   ("C-x n" . git-gutter:next-hunk)
	   ("C-x v =" . git-gutter:popup-hunk)
	   ("C-x v r" . git-gutter:revert-hunk)))
#+END_SRC
* git gutter fringe
##+BEGIN_SRC emacs-lisp
    (use-package git-gutter-fringe
      :ensure t
      :init
      (global-git-gutter-mode 1)
      :config
      (set-face-forground 'git-gutter-fr:added "blue"))
#+END_SRC
* docker
#+BEGIN_SRC emacs-lisp
  (use-package docker
    :ensure t
    :bind ("C-c C-d" . docker))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode
    :ensure t)
#+END_SRC
* zoom
#+BEGIN_SRC emacs-lisp
  (use-package zoom
    :ensure t
    :init
    (zoom-mode t)) 
#+END_SRC
* ztree
##+BEGIN_SRC emacs-lisp
  (use-package ztree
    :ensure t
    :bind* (("C-c k" . ztree-dir))
    :init
    (setq ztree-dir-move-focus t))
#+END_SRC
* show invisibles
#+BEGIN_SRC emacs-lisp
  (global-whitespace-mode t)
  (setq whitespace-display-mappings
    ;; all numbers are Unicode codepoint in decimal. ⁖ (insert-char 182 1)
    '(
      (space-mark 32 [183] [46]) ; 32 SPACE 「 」, 183 MIDDLE DOT 「·」, 46 FULL STOP 「.」
      (newline-mark 10 [8629 10]) ; 10 LINE FEED
      (tab-mark 9 [9655 9] [92 9]) ; 9 TAB, 9655 WHITE RIGHT-POINTING TRIANGLE 「▷」
      ))
#+END_SRC
* multiple cursors
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :init
    (progn
      (global-set-key (kbd "C-c m") 'mc/edit-lines)
      (global-set-key (kbd "M-d") 'mc/mark-next-like-this)
      ;; (global-set-key (kbd "M-D") 'mc/mark-previous-like-this)
      (global-set-key [(meta shift g)] 'mc/mark-all-like-this)))
#+END_SRC
* accept y: yes n: no
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
* yahoo weather
##+BEGIN_SRC emacs-lisp
  (use-package yahoo-weather
    :ensure t
    :init
    (yahoo-weather-mode 1)
    (setq yahoo-weather-location "55407")
    (setq yahoo-weather-use-F t)
    (setq yahoo-weather-temperture-format "%d")
    (setq yahoo-weather-format "[%(weather) %(temperature)(%(wind-chill))]"))
##+END_SRC
* pair / match delimiters
##+BEGIN_SRC emacs-lisp
  (defun electric-pair()
    (interactive)
    (if (eolp) (let (parens-requre-spaces) (insert-pair)) (self-insert-command 1)))
  (add-hook 'prog-mode-hook
	    (lambda ()
	      (define-key prog-mode-map "\"" 'electric-pair)
	      (define-key prog-mode-map "\'" 'electric-pair)
	      (define-key prog-mode-map "(" 'electric-pair)
	      (define-key prog-mode-map "[" 'electric-pair)
	      (define-key prog-mode-map "{" 'electric-pair)))
##+END_SRC
* web mode
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :mode ("\\.hbs\\'"
           "\\.jsx\\'"
           "\\.vue\\'"
           "/\\([Vv]iews\\|[Hh]tml\\|[Tt]emplates\\)/.*\\.php\\'"
           "\\.blade\\.php\\'")
    :config
    (setq sgml-basic-offset 2)
    (add-to-list 'web-mode-indentation-params '("lineup-args" . nil))
    (add-to-list 'web-mode-indentation-params '("lineup-concats" . nil))
    (add-to-list 'web-mode-indentation-params '("lineup-calls" . nil)))
#+END_SRC
* indent levels
* indent no tabs
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 2)
  (setq python-indent-level 4)
  (setq perl-indent-level 4)
  (setq js-indent-level 2)
#+END_SRC
* emmet
#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :ensure t
    :commands emmet-mode
    :init
    (setq emmet-indentation 2)
    (setq emmet-move-cursor-between-quotes t)
    :config
    (add-hook 'sgml-mode-hook 'emmet-mode)
    (add-hook 'css-mode-hook 'emmet-mode))
#+END_SRC
* neotree
** all the icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t)
#+END_SRC
** neotree
#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :ensure t
    :bind ("C-c k" . neotree)
    :config
    (setq neo-dont-be-alone t
          neo-theme 'icons))
#+END_SRC
* modeline (smart line mode)
#+BEGIN_SRC emacs-lisp
  (use-package sml-mode
    :ensure t
    :config
    (setq sml/theme 'dark)
    (setq evil-normal-state-tag   (propertize " <N> " 'face '((:background "#fd971f" :foreground "black")))
            evil-emacs-state-tag    (propertize " <E> " 'face '((:background "SkyBlue2"       :foreground "black")))
            evil-insert-state-tag   (propertize " <I> " 'face '((:background "#a6e22e"    :foreground "black")))
            evil-replace-state-tag  (propertize " <R> " 'face '((:background "#a6e22e"      :foreground "black")))
            evil-motion-state-tag   (propertize " <M> " 'face '((:background "plum3"          :foreground "black")))
            evil-visual-state-tag   (propertize " <V> " 'face '((:background "#f92672"           :foreground "black")))
            evil-operator-state-tag (propertize " <O> " 'face '((:background "#66d9ef"    :foreground "black")))))
#+END_SRC

* prettier
#+BEGIN_SRC emacs-lisp
  (use-package prettier-js
    :ensure t
    :config
    (add-hook 'web-mode-hook 'prettier-js-mode))
#+END_SRC
