* frames
** frame size
#+BEGIN_SRC emacs-lisp
  (when window-system (set-frame-size (selected-frame) 120 60))
#+END_SRC
* minor settings
** subword
#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC
** show lines and column numbers
#+BEGIN_SRC emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
#+END_SRC
** mark multiple
#+BEGIN_SRC emacs-lisp
  (use-package mark-multiple
    :ensure t
    :bind ("C-c q" . 'mark-next-like-this))
#+END_SRC
** expand region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-q" . er/expand-region))
#+END_SRC
** duplicate line
#+BEGIN_SRC emacs-lisp
  (defun duplicate-line()
    (interactive)
    (move-beginning-of-line 1)
    (kill-line)
    (yank)
    (open-line 1)
    (next-line 1)
    (yank))
  (global-set-key (kbd "C-c C-d") 'duplicate-line)
#+END_SRC
** enter new line below
#+BEGIN_SRC emacs-lisp
  (defun insert-line-below()
    (interactive)
    (move-end-of-line 1)
    (open-line 1)
    (next-line 1))
  (global-set-key (kbd "C-c n") 'insert-line-below)
#+END_SRC
* Org
** org bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC

** basic config
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
** indent
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hood 'org-indent-mode)
#+END_SRC
* exwm
#+BEGIN_SRC emacs-lisp
  (use-package exwm
    :ensure t
    :config
    (require 'exwm-config)
    (exwm-config-default))
#+END_SRC
* Which Key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    
(which-key-mode))
#+END_SRC

* beacon
** flash line when changing buffers
#+BEGIN_SRC emacs-lisp
    (use-package beacon
      :ensure t
      :init
      (beacon-mode 1)
      (setq beacon-color "#1d829e"))
#+END_SRC

* window system
** highlight line
#+BEGIN_SRC emacs-lisp
  (when window-system (global-hl-line-mode t))
#+END_SRC
** change words to symbols
#+BEGIN_SRC emacs-lisp
  (use-package pretty-mode
    :ensure t
    :config
    (global-pretty-mode t))
#+END_SRC
* emacs gui
** no toolbar
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
#+END_SRC
** no scrollbar
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
#+END_SRC

# emacs settings
#+BEGIN_SRC emacs-lisp
  (setq package-enable-at-startup nil)
  (setq ring-bell-function 'ignore)
  (setq inhibit-startup-screen t)
  (setq make-backup-file nil)
  (setq auto-save-default nil)
#+END_SRC

* modeline
** spaceline
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq powerline-default-separator (quote arrow))
    (spaceline-spacemacs-theme))
#+END_SRC
** dimish - hide some minor modes
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :init
    (diminish 'beacon-mode)
    (diminish 'rainbow-mode) 
    (diminish 'which-key-mode))
#+END_SRC
* IDO
** enable ido mode
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywehre t)
  (ido-mode 1)
#+END_SRC
** ido-vertical
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC
** smex
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+END_SRC


** switch buffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+END_SRC
* dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 10)))
    (setq dashboard-banner-logo-title "Don't wait. The time will never be just right"))
  
#+END_SRC
* buffers
** enable ibuffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
#+END_SRC
* helm
** use helm
##+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :init
    (helm-mode 1))
  (global-set-key (kbd "C-x b") 'helm-buffers-list)
#+END_SRC
* avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC
* config edit / reload
** edit
#+BEGIN_SRC emacs-lisp
  (defun config-visit()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC
** reload
#+BEGIN_SRC emacs-lisp
  (defun config-reload()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
* rainbow
** Show Hex colors
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init (add-hook 'prog-mode-hook 'rainbow-mode))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (rainbow-delimiters-mode 1))
#+END_SRC
* switch-window
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '("a" "s" "d" "f" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window))
#+END_SRC
* window splitting fcn
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
* random fcnsp
* auto completion
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC
* kill ring
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+END_SRC
* swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind ("C-s" . swiper))
#+END_SRC





* yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (use-package yasnippet-snippets
      :ensure t)
    (yas-reload-all))
  (add-hook 'prog-mode-hook #'yas-minor-mode)

#+END_SRC
* git
** magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind ("C-x g" . magit-status))
#+END_SRC
** git gutter
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :ensure t
    :config (global-git-gutter-mode)
    :init
    (progn
      (setq git-gutter:separator-sign " "
	    git-gutter:lighter " GG"))
    :config
    (progn
      (set-face-background 'git-gutter:deleted "#990A1B")
      (set-face-foreground 'git-gutter:deleted "#990A1B")
      (set-face-background 'git-gutter:modified "#00736F")
      (set-face-foreground 'git-gutter:modified "#00736F")
      (set-face-background 'git-gutter:added "#546E00")
      (set-face-foreground 'git-gutter:added "#546E00"))
    :bind (("C-x p" . git-gutter:previous-hunk)
	   ("C-x n" . git-gutter:next-hunk)
	   ("C-x v =" . git-gutter:popup-hunk)
	   ("C-x v r" . git-gutter:revert-hunk)))
#+END_SRC
* docker
#+BEGIN_SRC emacs-lisp
  (use-package docker
    :ensure t
    :bind ("C-c d" . docker))
#+END_SRC
* zoom
#+BEGIN_SRC emacs-lisp
  (use-package zoom
    :ensure t
    :init
    (zoom-mode t)) 
#+END_SRC
* ztree
#+BEGIN_SRC emacs-lisp
  (use-package ztree
    :ensure t
    :bind* (("C-c k" . ztree-dir)
      ("C-c b" . ztree-diff))
    :init
    (setq ztree-dir-move-focus t))
#+END_SRC
