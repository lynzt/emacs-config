* Org
** org bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC

* exwm
#+BEGIN_SRC emacs-lisp
  (use-package exwm
    :ensure t
    :config
    (require 'exwm-config)
    (exwm-config-default))
#+END_SRC
* Which Key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    
(which-key-mode))
#+END_SRC

* beacon
** flash line when changing buffers
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))
#+END_SRC

* window system
** highlight line
#+BEGIN_SRC emacs-lisp
  (when window-system (global-hl-line-mode t))
#+END_SRC
** change words to symbols
#+BEGIN_SRC emacs-lisp
  (when window-system (global-prettify-symbols-mode t))
#+END_SRC

* emacs gui
** no toolbar
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
#+END_SRC
** no scrollbar
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
#+END_SRC

# emacs settings
#+BEGIN_SRC emacs-lisp
  (setq package-enable-at-startup nil)
  (setq ring-bell-function 'ignore)
  (setq inhibit-startup-screen t)
  (setq make-backup-file nil)
  (setq auto-save-default nil)
#+END_SRC

* modeline
** spaceline
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq powerline-default-separator (quote arrow))
    (spaceline-spacemacs-theme))
#+END_SRC
** dimish - hide some minor modes
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :init
    (diminish 'beacon-mode)
    (diminish 'rainbow-mode) 
    (diminish 'which-key-mode))
#+END_SRC
* IDO
** enable ido mode
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywehre t)
  (ido-mode 1)
#+END_SRC
** ido-vertical
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC
** smex
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+END_SRC


** switch buffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+END_SRC
* buffers
** enable ibuffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
#+END_SRC
* helm
** use helm
##+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :init
    (helm-mode 1))
  (global-set-key (kbd "C-x b") 'helm-buffers-list)
#+END_SRC
* avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC

* config edit / reload
** edit
#+BEGIN_SRC emacs-lisp
  (defun config-visit()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC
** reload
#+BEGIN_SRC emacs-lisp
  (defun config-reload()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
* rainbow
** show hex colors
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init (rainbow-mode 1))
#+END_SRC
* switch-window
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '("a" "s" "d" "f" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window))
#+END_SRC
* window splitting fcn
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
